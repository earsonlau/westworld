# 给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，
# 使得 a + b + c = 0 ？
# 请你找出所有满足条件且不重复的三元组。
#  注意：答案中不可以包含重复的三元组。
#
#  示例：
#  给定数组 nums = [-1, 0, 1, 2, -1, -4]
# 满足要求的三元组集合为：
# [
#   [-1, 0, 1],
#   [-1, -1, 2]
# ]
#
# 思路：
# 这道题目只要求存在三个元素abc满足要求即可，不要求是连续的子数组，
# 故可以先排序，把正数负数分开。排序用窗口框住若干个数字，如果窗口内求和能得到0，说明满足要求。
# 窗口的实现使用两个只能向右移动的指针。

# 具体实现：
# 如果给定数组元素个数少于3，直接返回空。
# 遍历数组。
# 如果最左侧元素nums[i] > 0 ,那么窗口怎么向右拓展都不会得到和为0了，遍历结束，直接返回。
# 遍历的时候如果发现i位置元素和前一位置的元素值重复，跳过该位置，避免出现重复解。
# 左指针一开始指向 i+1 位置，右指针一开始指向len(arr)-1位置。
# 当左指针小于右指针时，一直执行while循环。
# 如果窗口内元素和等于0，说明窗口内元素是一组解，加入结果集。
# 如果左指针的元素和他右边的元素相同，那么左指针一直向右走，直到跳过所有重复值。
# 如果右指针的元素和他左边的元素相同，那么右指针一直向左走，直到跳过所有重复值。
# 然后左指针向右移一格，右指针向左移一格。
# 如果窗口内元素和小于0，说明窗口内最左元素偏小，左指针向右走一步。
# 如果窗口内元素和大于0，说明窗口内最右元素偏大，右指针向左走一步。


from typing import List
# 排序+双指针
class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        res = []
        if(not nums or n<3):
            return []
        nums.sort() # 对数组nums排序
        for i in range(n): #遍历数组
            if(nums[i]>0):
                return res #后面不可能再来两个数和nums[i]相加=0
            if(i>0 and nums[i]==nums[i-1]):
                continue #跳过，避免出现重复解
            L=i+1 #左指针指向i的后一个数
            R=n-1 #右指针指向最后一个数
            while(L<R): #两个指针没碰到
                if(nums[i]+nums[L]+nums[R]==0):
                    res.append([nums[i],nums[L],nums[R]]) #找到一组解，放进口袋
                    while(L<R and nums[L]==nums[L+1]): #左指针和下一位置有重复
                        L=L+1 #左指针右移一格
                    while(L<R and nums[R]==nums[R-1]): #右指针和前一位置有重复
                        R=R-1 #右指针前移一格
                    L=L+1 #寻找新解
                    R=R-1 #寻找新解
                elif(nums[i]+nums[L]+nums[R]>0):
                    R=R-1 #nums[R]太大，右指针左移
                else:
                    L=L+1 #nums[L]太小，左指针右移
        return res

#执行
a = Solution()
print(a.threeSum([4,2,-1,0,1,2,-1]))